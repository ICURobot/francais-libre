const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')
require('dotenv').config({ path: '../.env.local' })

async function generateLesson7Audio() {
  console.log('üéµ Generating comprehensive audio for Lesson 7: Les Directions...')
  
  // Create Supabase client
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Missing required environment variables')
    return
  }
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey)
  
  // ElevenLabs configuration
  const elevenLabsApiKey = process.env.ELEVENLABS_API_KEY
  if (!elevenLabsApiKey) {
    console.error('‚ùå Missing ElevenLabs API key')
    return
  }
  
  // Voice IDs
  const voices = {
    mylene: 'WQKwBV2Uzw1gSGr69N8I',      // First female voice (Emma)
    marie: 'F1toM6PcP54s45kOOAyV',        // Second female voice (Marie)
    andre: 'qNc8cbRJLnPqGTjuVcKa'         // Male voice (Andre)
  }
  
  // Create local backup directory
  const backupDir = path.join(__dirname, '../audio-backup/lesson7-audio')
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true })
  }
  
  console.log(`üìÅ Local backup directory: ${backupDir}`)
  
  // Lesson 7 content
  const lesson7Content = {
    dialogue: [
      // Emma's lines (Myl√®ne voice)
      { text: 'Excusez-moi, madame. Je suis perdue. O√π est le Louvre, s\'il vous pla√Æt?', speaker: 'Emma', voiceId: voices.mylene },
      { text: 'Je pr√©f√®re marcher si ce n\'est pas trop loin.', speaker: 'Emma', voiceId: voices.mylene },
      { text: 'Tout droit... Et apr√®s la Seine?', speaker: 'Emma', voiceId: voices.mylene },
      { text: '√Ä droite sur le quai, pont du Carrousel... Et ensuite?', speaker: 'Emma', voiceId: voices.mylene },
      { text: 'Parfait! Et si je me perds, quelle est la station de m√©tro la plus proche?', speaker: 'Emma', voiceId: voices.mylene },
      { text: 'Vous √™tes tr√®s aimable. Combien co√ªte un ticket de m√©tro?', speaker: 'Emma', voiceId: voices.mylene },
      { text: 'Merci beaucoup pour votre aide! Bonne journ√©e!', speaker: 'Emma', voiceId: voices.mylene },
      
      // Marie's lines (Marie voice)
      { text: 'Ah, le mus√©e du Louvre! Vous √™tes √† pied ou vous prenez le m√©tro?', speaker: 'Marie', voiceId: voices.marie },
      { text: 'C\'est √† quinze minutes √† pied. Allez tout droit jusqu\'√† la Seine.', speaker: 'Marie', voiceId: voices.marie },
      { text: 'Tournez √† droite sur le quai, puis traversez le pont du Carrousel.', speaker: 'Marie', voiceId: voices.marie },
      { text: 'Apr√®s le pont, vous voyez une grande pyramide de verre. C\'est l\'entr√©e du Louvre!', speaker: 'Marie', voiceId: voices.marie },
      { text: 'La station "Palais-Royal - Mus√©e du Louvre" sur les lignes 1 et 7.', speaker: 'Marie', voiceId: voices.marie },
      { text: 'Un ticket co√ªte deux euros dix, mais je conseille un carnet de dix tickets.', speaker: 'Marie', voiceId: voices.marie },
      { text: 'De rien! Bon voyage et profitez bien de votre visite!', speaker: 'Marie', voiceId: voices.marie }
    ],
    
    grammarExamples: [
      'Allez tout droit jusqu\'au carrefour.',
      'Tournez √† gauche apr√®s la banque.',
      'La pharmacie est en face de la boulangerie.',
      'C\'est √† dix minutes √† pied.',
      'Prenez le m√©tro ligne 4 direction Porte de Clignancourt.',
      'Descendez √† la prochaine station.'
    ],
    
    vocabulary: [
      // Direction basics
      { word: 'tout droit', example: 'Allez tout droit jusqu\'au feu rouge.' },
      { word: '√† droite', example: 'Tournez √† droite apr√®s l\'√©glise.' },
      { word: '√† gauche', example: 'La banque est √† gauche.' },
      { word: 'tourner', example: 'Vous devez tourner ici.' },
      { word: 'traverser', example: 'Traversez la rue avec prudence.' },
      { word: 'continuer', example: 'Continuez jusqu\'√† la place.' },
      
      // Location prepositions
      { word: '√† c√¥t√© de', example: 'La poste est √† c√¥t√© de la pharmacie.' },
      { word: 'en face de', example: 'Le caf√© est en face de l\'h√¥tel.' },
      { word: 'pr√®s de', example: 'J\'habite pr√®s de la gare.' },
      { word: 'loin de', example: 'C\'est loin de votre h√¥tel?' },
      { word: 'entre', example: 'Le restaurant est entre la banque et la poste.' },
      { word: 'au coin de', example: 'Il y a une boulangerie au coin de la rue.' },
      
      // Transportation
      { word: 'le m√©tro', example: 'Je prends le m√©tro tous les jours.' },
      { word: 'l\'autobus', example: 'Le bus num√©ro 21 va √† l\'a√©roport.' },
      { word: 'le train', example: 'Le train pour Lyon part dans dix minutes.' },
      { word: 'le taxi', example: 'Appelons un taxi, il pleut.' },
      { word: '√† pied', example: 'C\'est plus rapide √† pied.' },
      { word: 'en voiture', example: 'Nous y allons en voiture.' },
      
      // Metro/Transit
      { word: 'la station', example: 'Quelle est la prochaine station?' },
      { word: 'la gare', example: 'La gare du Nord est tr√®s grande.' },
      { word: 'la ligne', example: 'Prenez la ligne 1 direction Vincennes.' },
      { word: 'la direction', example: 'M√©tro ligne 4, direction Porte d\'Orl√©ans.' },
      { word: 'le ticket', example: 'J\'ai besoin d\'un ticket de m√©tro.' },
      { word: 'le carnet', example: 'Un carnet co√ªte moins cher.' },
      { word: 'composter', example: 'N\'oubliez pas de composter votre ticket.' },
      
      // City landmarks
      { word: 'la place', example: 'Rendez-vous place de la R√©publique.' },
      { word: 'le pont', example: 'Traversez le pont Neuf.' },
      { word: 'la rue', example: 'J\'habite rue de Rivoli.' },
      { word: 'l\'avenue', example: 'L\'avenue des Champs-√âlys√©es est c√©l√®bre.' },
      { word: 'le boulevard', example: 'Le boulevard Saint-Germain est anim√©.' },
      { word: 'le carrefour', example: 'Tournez √† droite au carrefour.' },
      { word: 'le feu rouge', example: 'Arr√™tez-vous au feu rouge.' },
      
      // Buildings
      { word: 'la banque', example: 'La banque ferme √† 17 heures.' },
      { word: 'la poste', example: 'O√π est la poste la plus proche?' },
      { word: 'l\'h√¥pital', example: 'L\'h√¥pital est √† dix minutes d\'ici.' },
      { word: 'l\'√©glise', example: 'L\'√©glise Notre-Dame est magnifique.' },
      { word: 'le mus√©e', example: 'Le mus√©e d\'Orsay expose les impressionnistes.' },
      { word: 'l\'h√¥tel', example: 'Mon h√¥tel est pr√®s de la gare.' },
      
      // Distance and time
      { word: 'proche', example: 'C\'est tr√®s proche d\'ici.' },
      { word: 'loin', example: 'Ce n\'est pas tr√®s loin.' },
      { word: '√† ... minutes', example: 'C\'est √† cinq minutes √† pied.' },
      
      // Getting lost/help
      { word: 'perdu(e)', example: 'Je suis perdu, pouvez-vous m\'aider?' },
      { word: 'se perdre', example: 'Je me perds toujours dans cette ville.' },
      { word: 'aider', example: 'Pouvez-vous m\'aider, s\'il vous pla√Æt?' }
    ]
  }
  
  let totalGenerated = 0
  let totalErrors = 0
  
  // Generate dialogue audio
  console.log('\nüó£Ô∏è Generating dialogue audio...')
  for (const exchange of lesson7Content.dialogue) {
    try {
      const result = await generateAndStoreAudio(
        exchange.text,
        exchange.voiceId,
        exchange.speaker,
        'dialogue',
        supabase,
        backupDir
      )
      if (result.success) {
        totalGenerated++
        console.log(`   ‚úÖ ${exchange.speaker}: "${exchange.text.substring(0, 50)}..."`)
      } else {
        totalErrors++
        console.log(`   ‚ùå ${exchange.speaker}: "${exchange.text.substring(0, 50)}..." - ${result.error}`)
      }
    } catch (error) {
      totalErrors++
      console.log(`   ‚ùå ${exchange.speaker}: "${exchange.text.substring(0, 50)}..." - ${error.message}`)
    }
  }
  
  // Generate grammar examples audio
  console.log('\nüìö Generating grammar examples audio...')
  for (const example of lesson7Content.grammarExamples) {
    try {
      const result = await generateAndStoreAudio(
        example,
        voices.andre,
        'Andr√©',
        'grammar',
        supabase,
        backupDir
      )
      if (result.success) {
        totalGenerated++
        console.log(`   ‚úÖ Grammar: "${example.substring(0, 50)}..."`)
      } else {
        totalErrors++
        console.log(`   ‚ùå Grammar: "${example.substring(0, 50)}..." - ${result.error}`)
      }
    } catch (error) {
      totalErrors++
      console.log(`   ‚ùå Grammar: "${example.substring(0, 50)}..." - ${error.message}`)
    }
  }
  
  // Generate vocabulary audio
  console.log('\nüìñ Generating vocabulary audio...')
  for (const item of lesson7Content.vocabulary) {
    try {
      // Generate audio for the word
      const wordResult = await generateAndStoreAudio(
        item.word,
        voices.andre,
        'Andr√©',
        'vocabulary',
        supabase,
        backupDir
      )
      if (wordResult.success) {
        totalGenerated++
        console.log(`   ‚úÖ Word: "${item.word}"`)
      } else {
        totalErrors++
        console.log(`   ‚ùå Word: "${item.word}" - ${wordResult.error}`)
      }
      
      // Generate audio for the example sentence
      const exampleResult = await generateAndStoreAudio(
        item.example,
        voices.andre,
        'Andr√©',
        'vocabulary',
        supabase,
        backupDir
      )
      if (exampleResult.success) {
        totalGenerated++
        console.log(`   ‚úÖ Example: "${item.example.substring(0, 50)}..."`)
      } else {
        totalErrors++
        console.log(`   ‚ùå Example: "${item.example.substring(0, 50)}..." - ${wordResult.error}`)
      }
    } catch (error) {
      totalErrors++
      console.log(`   ‚ùå Vocabulary item: "${item.word}" - ${error.message}`)
    }
  }
  
  console.log('\nüéâ Audio generation completed!')
  console.log(`‚úÖ Total generated: ${totalGenerated}`)
  console.log(`‚ùå Total errors: ${totalErrors}`)
  console.log(`üìÅ Local backups saved to: ${backupDir}`)
}

async function generateAndStoreAudio(text, voiceId, voiceName, category, supabase, backupDir) {
  try {
    // Check if audio already exists
    const { data: existingAudio } = await supabase
      .from('audio_pronunciations')
      .select('*')
      .eq('text', text)
      .eq('voice_name', voiceName)
      .single()
    
    if (existingAudio) {
      console.log(`   ‚ö†Ô∏è  Audio already exists: ${existingAudio.file_name}`)
      return { success: true, message: 'Already exists' }
    }
    
    // Generate audio with ElevenLabs
    const audioResponse = await generateElevenLabsAudio(text, voiceId)
    if (!audioResponse.success) {
      return { success: false, error: audioResponse.error }
    }
    
    // Create completely safe filename for Supabase storage
    const safeText = text
      .toLowerCase()
      .replace(/[√†√°√¢√£√§√•]/g, 'a')
      .replace(/[√®√©√™√´]/g, 'e')
      .replace(/[√¨√≠√Æ√Ø]/g, 'i')
      .replace(/[√≤√≥√¥√µ√∂]/g, 'o')
      .replace(/[√π√∫√ª√º]/g, 'u')
      .replace(/[√ß]/g, 'c')
      .replace(/[√©√®]/g, 'e')
      .replace(/[√†]/g, 'a')
      .replace(/[√π]/g, 'u')
      .replace(/[√¥]/g, 'o')
      .replace(/[√Æ]/g, 'i')
      .replace(/[√ª]/g, 'u')
      .replace(/[√™]/g, 'e')
      .replace(/[√¢]/g, 'a')
      .replace(/[√Ø]/g, 'i')
      .replace(/[√´]/g, 'e')
      .replace(/[√º]/g, 'u')
      .replace(/[√∂]/g, 'o')
      .replace(/[√§]/g, 'a')
      .replace(/[√•]/g, 'a')
      .replace(/[√¶]/g, 'ae')
      .replace(/[≈ì]/g, 'oe')
      .replace(/[^a-z0-9\s]/g, '') // Remove ALL special characters
      .replace(/\s+/g, '_') // Replace spaces with underscores
      .replace(/_+/g, '_') // Replace multiple underscores with single
      .replace(/^_|_$/g, '') // Remove leading/trailing underscores
      .substring(0, 30) // Limit length to be safe
    
    // Save local backup
    const backupPath = path.join(backupDir, `${safeText}_${voiceName}_${Date.now()}.mp3`)
    fs.writeFileSync(backupPath, Buffer.from(audioResponse.audioData, 'base64'))
    
    // Upload to Supabase Storage
    const fileName = `${safeText}_${voiceName}_${Date.now()}.mp3`
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('audio')
      .upload(fileName, Buffer.from(audioResponse.audioData, 'base64'), {
        contentType: 'audio/mpeg',
        cacheControl: '3600'
      })
    
    if (uploadError) {
      console.error('Storage upload error:', uploadError)
      return { success: false, error: uploadError.message }
    }
    
    // Get public URL
    const { data: { publicUrl } } = supabase.storage
      .from('audio')
      .getPublicUrl(fileName)
    
    // Store reference in database
    const { error: dbError } = await supabase
      .from('audio_pronunciations')
      .insert({
        text: text,
        audio_url: publicUrl,
        voice_id: voiceId,
        voice_name: voiceName,
        category: category,
        lesson_id: 'beginner-7',
        file_name: fileName
      })
    
    if (dbError) {
      console.error('Database insert error:', dbError)
      return { success: false, error: dbError.message }
    }
    
    return { success: true, fileName: fileName }
    
  } catch (error) {
    console.error('Audio generation error:', error)
    return { success: false, error: error.message }
  }
}

async function generateElevenLabsAudio(text, voiceId) {
  try {
    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': process.env.ELEVENLABS_API_KEY
      },
      body: JSON.stringify({
        text: text,
        model_id: 'eleven_multilingual_v2',
        voice_settings: {
          stability: 0.5,
          similarity_boost: 0.75
        }
      })
    })
    
    if (!response.ok) {
      const errorData = await response.text()
      throw new Error(`ElevenLabs API error: ${response.status} ${response.statusText} - ${errorData}`)
    }
    
    const audioBlob = await response.blob()
    const arrayBuffer = await audioBlob.arrayBuffer()
    const base64Audio = Buffer.from(arrayBuffer).toString('base64')
    
    return {
      success: true,
      audioData: base64Audio
    }
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    }
  }
}

// Run the script
generateLesson7Audio().catch(console.error)
