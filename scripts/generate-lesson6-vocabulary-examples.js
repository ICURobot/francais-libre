const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '../.env.local' })

async function generateLesson6VocabularyExamples() {
  console.log('üéµ Generating audio for Lesson 6 vocabulary example sentences using Andre\'s voice...')
  
  // Create Supabase client
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Missing required environment variables')
    return
  }
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey)
  
  // ElevenLabs configuration
  const elevenLabsApiKey = process.env.ELEVENLABS_API_KEY
  if (!elevenLabsApiKey) {
    console.error('‚ùå Missing ElevenLabs API key')
    return
  }
  
  // Andre's voice ID
  const andreVoiceId = 'qNc8cbRJLnPqGTjuVcKa'
  
  // Lesson 6 vocabulary example sentences
  const exampleSentences = [
    // Restaurant
    'Ce restaurant est excellent.',
    'J\'aime les petits bistrots parisiens.',
    'J\'ai une r√©servation √† vingt heures.',
    'Cette table pr√®s de la fen√™tre est libre?',
    'Le serveur est tr√®s aimable.',
    'La serveuse conna√Æt bien la carte.',
    
    // Menu sections
    'Pourriez-vous m\'apporter la carte?',
    'Comme entr√©e, je prends la salade.',
    'Le plat principal arrive bient√¥t.',
    'Quel dessert me conseillez-vous?',
    'Quelle est la sp√©cialit√© de la maison?',
    'Le menu du jour est √† vingt euros.',
    
    // Food items - French specialties
    'La soupe √† l\'oignon est une sp√©cialit√© fran√ßaise.',
    'Le coq au vin est d√©licieux ici.',
    'J\'adore le b≈ìuf bourguignon de ma grand-m√®re.',
    'Les escargots sont pr√©par√©s avec de l\'ail.',
    'Un steak-frites bien cuit, s\'il vous pla√Æt.',
    'La ratatouille est parfaite en √©t√©.',
    
    // Drinks
    'Prenons un ap√©ritif avant le d√Æner.',
    'Ce vin rouge se marie bien avec la viande.',
    'Le vin blanc accompagne le poisson.',
    'Une bouteille d\'eau gazeuse, s\'il vous pla√Æt.',
    'Je pr√©f√®re l\'eau plate √† l\'eau gazeuse.',
    
    // Cooking methods & descriptions
    'Je voudrais mon steak saignant.',
    'Mon mari pr√©f√®re son steak √† point.',
    'Elle commande toujours bien cuit.',
    'Le poisson grill√© est excellent.',
    'Les l√©gumes saut√©s sont d√©licieux.',
    
    // Restaurant expressions
    'Que me recommandez-vous?',
    'Nous allons commander maintenant.',
    'L\'addition, s\'il vous pla√Æt.',
    'Le pourboire n\'est pas obligatoire.',
    'Ce plat est vraiment d√©licieux!',
    
    // Allergies and dietary restrictions
    'J\'ai une allergie aux noix.',
    'Je suis v√©g√©tarien.',
    'Avez-vous des plats sans gluten?',
    
    // Side dishes
    'Les pommes de terre saut√©es sont parfaites.',
    'Je voudrais des l√©gumes de saison.',
    'Une salade verte avec la vinaigrette.'
  ]
  
  console.log(`\nüìö Generating audio for ${exampleSentences.length} vocabulary example sentences...`)
  
  for (let i = 0; i < exampleSentences.length; i++) {
    const sentence = exampleSentences[i]
    console.log(`\n${i + 1}. Processing: "${sentence}"`)
    
    try {
      // Check if audio already exists with Andre's voice
      const { data: existingAudio } = await supabase
        .from('audio_pronunciations')
        .select('*')
        .eq('text', sentence)
        .eq('voice_name', 'Andr√©')
        .single()

      if (existingAudio) {
        console.log(`   ‚úÖ Audio already exists with Andre's voice: ${existingAudio.file_name}`)
        continue
      }

      // Check if there's existing audio with other voices that we should replace
      const { data: otherVoiceAudio } = await supabase
        .from('audio_pronunciations')
        .select('*')
        .eq('text', sentence)
        .neq('voice_name', 'Andr√©')
        .single()

      if (otherVoiceAudio) {
        console.log(`   üîÑ Replacing ${otherVoiceAudio.voice_name} voice with Andre's voice...`)
        // Delete the old audio file
        await supabase.storage
          .from('audio')
          .remove([otherVoiceAudio.file_name])
        
        // Delete the old database record
        await supabase
          .from('audio_pronunciations')
          .delete()
          .eq('id', otherVoiceAudio.id)
      }

      // Generate audio with ElevenLabs
      console.log(`   üé§ Generating audio with Andre's voice...`)
      
      const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${andreVoiceId}`, {
        method: 'POST',
        headers: {
          'Accept': 'audio/mpeg',
          'Content-Type': 'application/json',
          'xi-api-key': elevenLabsApiKey
        },
        body: JSON.stringify({
          text: sentence,
          model_id: 'eleven_multilingual_v2',
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.75
          }
        })
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error(`      ‚ùå ElevenLabs API error: ${response.status} - ${errorText}`)
        continue
      }

      // Convert audio to buffer
      const audioBuffer = await response.arrayBuffer()
      
      // Create filename
      const timestamp = Date.now()
      const fileName = `lesson6_vocab_example_${i + 1}_Andre_French_${timestamp}.mp3`
      
      // Upload to Supabase Storage
      const { error: uploadError } = await supabase.storage
        .from('audio')
        .upload(fileName, audioBuffer, {
          contentType: 'audio/mpeg',
          cacheControl: '3600'
        })

      if (uploadError) {
        console.error(`      ‚ùå Storage upload failed:`, uploadError)
        continue
      }

      // Get public URL
      const { data: urlData } = supabase.storage
        .from('audio')
        .getPublicUrl(fileName)

      const publicUrl = urlData.publicUrl

      // Store reference in database
      const { error: dbError } = await supabase
        .from('audio_pronunciations')
        .insert({
          text: sentence,
          audio_url: publicUrl,
          voice_id: andreVoiceId,
          voice_name: 'Andr√©',
          category: 'vocabulary',
          lesson_id: 'beginner-6',
          file_name: fileName
        })

      if (dbError) {
        console.error(`      ‚ùå Database insert failed:`, dbError)
        continue
      }

      console.log(`      ‚úÖ Audio generated and stored: ${fileName}`)
      
      // Add a small delay between requests
      await new Promise(resolve => setTimeout(resolve, 1000))
      
    } catch (error) {
      console.error(`   ‚ùå Error processing sentence ${i + 1}:`, error)
    }
  }

  console.log('\nüéâ Lesson 6 vocabulary example sentences audio generation complete!')
}

// Run the script
generateLesson6VocabularyExamples().catch(console.error)
